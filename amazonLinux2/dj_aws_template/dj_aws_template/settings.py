"""
Django settings for dj_aws_template project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import csv
import json
import sys
from pathlib import Path
import boto3
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-12344568' 
VERSION="dj_aws_template-0.1-a1"

# fix JSONField.bound_data
# https://github.com/django/django/commit/f5ea9aa2f32c7ca9a1fdf793580fddba3daae1b9
import django.forms.fields as fi
def bound_data(self, data, initial):
        if self.disabled:
            return initial
        if data is None:
            return None
        try:
            return json.loads(data, cls=self.decoder)
        except json.JSONDecodeError:
            return fi.InvalidJSONInput(data)
fi.JSONField.bound_data=bound_data
# SECURITY WARNING: don't run with debug turned on in production!
def initSetting():
    try:
        env_mode=os.environ['ENV_MODE']
    except:
        env_mode=0
    try:
        debug=True if os.environ['DJ_DEBUG'].lower() in ['true', '1'] else False
    except Exception as e:
        print(e)
        debug=True if env_mode==0 else False
    return  debug,int(env_mode)

DEBUG,ENV_MODE = initSetting()
print("VERSION: {}".format(VERSION))
print("DEBUG: {}".format(DEBUG))
print("ENV_MODE: {}".format(ENV_MODE))
print('encode: {}'.format(sys.getdefaultencoding()))

def envModeSetting(env_mode):
    result = {}

    # for local dev env
    if env_mode == 0:
        localhost='127.0.0.1'
        try:
            is_docker=bool(os.environ['IS_DOCKER']) # for running in docker env
            if is_docker:
                localhost='host.docker.internal'  # in docker use gateway.docker.internal
        except:
            is_docker=False
        # local dev env
        # the access Keys download form aws iam user/role
        with open('../../accessKeys.csv', "r", encoding='UTF-8') as f:
            rows = list(csv.reader(f))
        result['API_DEBUG'] = True
        result['HOST_URL'] = ""
        result['ADMIN_URL'] = 'admin'
        result['CORS_ORIGIN_ALLOW_ALL'] = False
        result['CORS_ALLOW_CREDENTIALS'] = True
        result['ALLOWED_HOSTS'] = ['127.0.0.1', result['HOST_URL']]
        result['CORS_ORIGIN_WHITELIST'] = ["http://localhost:4200",
                                           "http://localhost:8000",
                                           "http://127.0.0.1:4200",
                                           "http://127.0.0.1:8000"]

        
        # Database
        # https://docs.djangoproject.com/en/3.2/ref/settings/#databases
        result['DATABASES'] = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
        # for local postgresql db
        # result['DATABASES'] = {
        #     'default': {
        #         'ENGINE': 'django.db.backends.postgresql_psycopg2',
        #         'NAME': 'a123',
        #         'USER': 'postgres',
        #         'PASSWORD': '12345678',
        #         'HOST': localhost,
        #         'PORT': '5432',
        #         'CONN_MAX_AGE': 100 #sec,
                
        #     }
        # }
        # aws access
        result['AWS_REGION_NAME'] = "ap-southeast-1"
        result['AWS_ACCESS_KEY_ID'] = rows[1][0]
        result['AWS_SECRET_ACCESS_KEY'] = rows[1][1]
        #dynamodb
        result['AWS_DYNAMODB_TABLE_NAME'] = 'my-dynamodb-dev-table'
        # default file storage
        result['AWS_STORAGE_BUCKET_NAME'] = 'my-dev-bucket'
        # additional file storage
        result['AWS_S3BUCKET_NAME'] = "my-dev-bucket2"
        result['S3_RESOURCE']=boto3.resource('s3',aws_access_key_id=result['AWS_ACCESS_KEY_ID'],aws_secret_access_key=result['AWS_SECRET_ACCESS_KEY'])# for additional S3 resources 
        result['S3_CLIENT']=boto3.client('s3',aws_access_key_id=result['AWS_ACCESS_KEY_ID'],aws_secret_access_key=result['AWS_SECRET_ACCESS_KEY']) # for additional S3 resources and  presigned url
        # local Redis dev server
        result['DATABASES_REDIS_TAG'] = "my-dev-tag"
        result['CACHES'] = {
            "default": {
                "BACKEND": "django_redis.cache.RedisCache",
                "LOCATION": [
                    'redis://'+localhost+':6379',
                ],
                "OPTIONS": {
                    "CLIENT_CLASS": "django_redis.client.DefaultClient",
                    "SOCKET_CONNECT_TIMEOUT": 0.3,  # in seconds
                    "SOCKET_TIMEOUT": 0.3,  # in seconds
                }
            }
        }
        
        
        
    else:
        # for aws prodoction env 
        result['API_DEBUG'] = bool(os.environ['API_DEBUG'])
        result['HOST_URL'] = os.environ['HOST_URL']  # server url exp:  "www.domo.com"
        result['ADMIN_URL'] = os.environ['ADMIN_URL']
        result['CORS_ORIGIN_ALLOW_ALL'] = bool(os.environ['CORS_ORIGIN_ALLOW_ALL'])
        result['CORS_ALLOW_CREDENTIALS'] = bool(os.environ['CORS_ALLOW_CREDENTIALS'])
        # allowed host , like aws saas public dns
        # exp:  Airboxtest-env-2.eba-cu7p8e24.ap-southeast-1.elasticbeanstalk.com,localhost:8000,127.0.0.1:8000
        result['ALLOWED_HOSTS'] = os.environ['ALLOWED_HOSTS'].split(",")
        # cros frontend host    
        # exp:  http://demo-static.s3-website-ap-southeast-1.amazonaws.com,http://localhost:4200,http://127.0.0.1:4200
        result['CORS_ORIGIN_WHITELIST'] =  os.environ['CORS_ORIGIN_WHITELIST'].split(",")
        result['ALLOWED_HOSTS'].append(result['HOST_URL'])
        
        result['DATABASES'] = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql_psycopg2',
                'NAME': os.environ['RDS_DB_NAME'],
                'USER': os.environ['RDS_USERNAME'],
                'PASSWORD': os.environ['RDS_PASSWORD'],
                'HOST': os.environ['RDS_HOSTNAME'],
                'PORT': os.environ['RDS_PORT'],
                'CONN_MAX_AGE': 100 #sec
            }
        }
        # aws access
        result['AWS_REGION_NAME'] = os.environ['AWS_REGION_NAME']
        result['AWS_ACCESS_KEY_ID'] = None  #use iam role to access
        result['AWS_SECRET_ACCESS_KEY'] = None 
        #dynamodb
        result['AWS_DYNAMODB_TABLE_NAME'] = os.environ['AWS_DYNAMODB_TABLE_NAME'] # dynamodb table name
        # default file storage
        result['AWS_STORAGE_BUCKET_NAME'] = os.environ['AWS_STORAGE_BUCKET_NAME']
        # additional file storage
        result['AWS_S3BUCKET_NAME'] = os.environ['AWS_S3BUCKET_NAME']
        result['S3_RESOURCE']=boto3.resource('s3') # for additional S3 resources 
        result['S3_CLIENT']=boto3.client('s3') # for additional S3 resources and  presigned url
        # aws Redis 
        result['DATABASES_REDIS_TAG'] = os.environ['DATABASES_REDIS_TAG']  #redis namespace of key
        result['CACHES'] = {
            "default": {
                "BACKEND": "django_redis.cache.RedisCache",
                "LOCATION": [
                    "redis://{0}".format(os.environ['AWS_REDIS']),
                ],
                "OPTIONS": {
                    "CLIENT_CLASS": "django_redis.client.DefaultClient",
                    # in seconds
                    "SOCKET_CONNECT_TIMEOUT": int(os.environ['CACHES_SOCKET_CONNECT_TIMEOUT']),
                    # in seconds
                    "SOCKET_TIMEOUT": int(os.environ['CACHES_SOCKET_TIMEOUT']),
                },
            }
        }
    return result

RESULT = envModeSetting(ENV_MODE)
HOST_URL = RESULT['HOST_URL']
ALLOWED_HOSTS = RESULT['ALLOWED_HOSTS']
CACHES = RESULT['CACHES']
DATABASES = RESULT['DATABASES']
DATABASES_REDIS_TAG=RESULT['DATABASES_REDIS_TAG']

AWS_REGION_NAME = RESULT['AWS_REGION_NAME']
AWS_ACCESS_KEY_ID = RESULT['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = RESULT['AWS_SECRET_ACCESS_KEY']

AWS_SOFT_S3BUCKET_NAME = RESULT['AWS_SOFT_S3BUCKET_NAME']
AWS_USER_S3BUCKET_NAME = RESULT['AWS_USER_S3BUCKET_NAME']
S3_RESOURCE=RESULT['S3_RESOURCE']
S3_CLIENT=RESULT['S3_CLIENT']

CORS_ORIGIN_ALLOW_ALL = RESULT['CORS_ORIGIN_ALLOW_ALL']
CORS_ALLOW_CREDENTIALS = RESULT['CORS_ALLOW_CREDENTIALS']
CORS_ORIGIN_WHITELIST = RESULT['CORS_ORIGIN_WHITELIST']
CORS_ALLOW_METHODS = [
    'GET',
    'OPTIONS',
]
CORS_ALLOW_HEADERS = [
    'Content-Type'
]

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"  # S3 as file storage
AWS_S3_ADDRESSING_STYLE = "auto"
AWS_S3_GZIP = True
AWS_DEFAULT_ACL = None
AWS_S3_FILE_OVERWRITE = True
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=1000',
}



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'my_app1',
    
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
ROOT_URLCONF = 'dj_aws_template.urls'
IMPORT_EXPORT_IMPORT_PERMISSION_CODE="change"
IMPORT_EXPORT_EXPORT_PERMISSION_CODE=None
IMPORT_EXPORT_USE_TRANSACTIONS = True
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    )
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates", ],
        #'DIRS': [ ],
        #'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
            ],
            'loaders': [
                'admin_tools.template_loaders.Loader',
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader'
            ]
        },
       
    },
]




# https://stackoverflow.com/questions/25098466/how-to-store-django-hashed-password-without-the-user-object


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
#STATIC_ROOT = 'static'

STATIC_ROOT = BASE_DIR / 'static'

STATICFILES_DIRS = (
   # BASE_DIR / 'app_name' /'static',
)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#WSGI_APPLICATION = 'dj_aws_template.wsgi.application'
WSGI_APPLICATION = 'wsgi.application'



